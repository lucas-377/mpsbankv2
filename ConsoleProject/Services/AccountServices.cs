using ConsoleProject.Entities;
using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleProject.Services
{
    static class AccountServices
    {
        static Random seed = new Random();
        static List<Account> Accounts = new List<Account>();

        public static void Create()
        {
            Console.Clear();
            Console.WriteLine("====================================");
            Console.WriteLine("|     Create new account           |");
            Console.WriteLine("====================================");

            // Create new holder.
            Console.Write("Enter the Holder name: ");
            string holderName = Console.ReadLine();

            Holder holder = new Holder(seed.Next(9999), holderName); // Holder ID generated by random int

            // Create new account.
            int accID = Accounts.Count; // Account ID generated by index of list
            Account acc = new Account(accID);
            acc.AddHolder(holder); // Add holder to the account.

            Console.Write("Do you wish to make an initial deposit? (y/n): ");
            char depOpt = char.Parse(Console.ReadLine());

            if (depOpt == 'y' || depOpt == 'Y')
            {
                Console.Write("Enter deposit value: ");
                acc.Deposit(double.Parse(Console.ReadLine()));
            }

            Accounts.Add(acc); // Add account to list

            Console.WriteLine("\nAccount created!\n");
            Console.WriteLine(acc);
            Console.WriteLine(holder);
            Console.WriteLine();
        }

        public static void Read()
        {
            Console.Clear();
            Console.WriteLine("====================================");
            Console.WriteLine("|     Accounts List                |");
            Console.WriteLine("====================================");

            foreach (Account account in Accounts)
            {
                Console.WriteLine(account);
                account.Holders.ForEach(Console.WriteLine);
                Console.WriteLine();
            }
        }

        public static void Update()
        {
            Console.Clear();
            Console.WriteLine("====================================");
            Console.WriteLine("|     Edit account infos           |");
            Console.WriteLine("====================================");
            Console.WriteLine("Choose an option: ");
            Console.WriteLine("1. Show accounts list");
            Console.WriteLine("2. Edit account by ID");
            Console.Write("\nYour option: ");
            int opt = int.Parse(Console.ReadLine());

            if (opt == 1)
            {
                Read(); // Print accounts list

                Console.Write("Edit account by ID? (y/n): ");
                char op = char.Parse(Console.ReadLine());

                if (op == 'y' || op == 'Y')
                {
                    EditAccount();
                }

            }
            else if (opt == 2)
            {
                EditAccount();
            }

            static void EditAccount()
            {
                Console.Write("\nEnter the account ID to modify: ");
                int accId = int.Parse(Console.ReadLine());

                Account a = Accounts.Find(x => x.Id == accId); // Search account by specified id using lambda expression

                if (a != null)
                {
                    Console.WriteLine("\nSelected account: ");
                    Console.WriteLine(a);
                    a.Holders.ForEach(Console.WriteLine);

                    Console.WriteLine("\nChoose an option: ");
                    Console.WriteLine("1. Add holder to account");
                    Console.WriteLine("2. Remove holder from account");
                    Console.WriteLine("3. Change holder name");
                    Console.WriteLine("4. Back to menu");
                    Console.Write("\nYour option: ");
                    int optEdit = int.Parse(Console.ReadLine());

                    if (optEdit == 1)
                    {
                        // Create new holder
                        Console.Write("Enter the Holder name: ");
                        string holderName = Console.ReadLine();

                        Holder holder = new Holder(seed.Next(9999), holderName); // Holder ID generated by random int

                        a.AddHolder(holder); // Add holder to account
                    }

                    else if (optEdit == 2)
                    {
                        // Remove holder
                        Console.Write("Enter holder ID: ");
                        int hId = int.Parse(Console.ReadLine());

                        Holder h = a.Holders.Find(x => x.Id == hId);

                        if (h != null)
                        {
                            a.RemoveHolder(h); // Remove holder with specified Id using lambda expression
                        }
                        else
                        {
                            Console.WriteLine("ID not found!");
                        }
                    }

                    else if (optEdit == 3)
                    {
                        // Change holder name
                        Console.Write("Enter holder ID: ");
                        int hId = int.Parse(Console.ReadLine());

                        Holder h = a.Holders.Find(x => x.Id == hId);

                        if (h != null)
                        {
                            Console.Write("Enter the new name: ");
                            string newName = Console.ReadLine();
                            h.Name = newName;
                        }
                        else
                        {
                            Console.WriteLine("ID not found!");
                        }
                    }

                    Console.WriteLine("\nAccount modified!\n");

                    Console.WriteLine(a);
                    a.Holders.ForEach(Console.WriteLine);
                }
                else
                {
                    Console.WriteLine("ID not found!");
                }
            }
        }

        public static void Delete()
        {
            Console.Clear();
            Console.WriteLine("====================================");
            Console.WriteLine("|     Delete account               |");
            Console.WriteLine("====================================");
            Console.WriteLine("Choose an option: ");
            Console.WriteLine("1. Show accounts list");
            Console.WriteLine("2. Delete account by ID");
            Console.Write("\nYour option: ");
            int opt = int.Parse(Console.ReadLine());

            if (opt == 1)
            {
                Read(); // Print accounts list

                Console.Write("Delete account by ID? (y/n): ");
                char op = char.Parse(Console.ReadLine());

                if (op == 'y' || op == 'Y')
                {
                    DeleteAccount();
                }
            }
            else
            {
                DeleteAccount();
            }

            static void DeleteAccount()
            {
                Console.Write("\nEnter the account ID to delete: ");
                int accId = int.Parse(Console.ReadLine());

                Account a = Accounts.Find(x => x.Id == accId); // Search account by specified id using lambda expression

                if (a != null)
                {
                    Console.WriteLine("\nSelected account: ");
                    Console.WriteLine(a);
                    a.Holders.ForEach(Console.WriteLine);

                    Console.Write("Are you sure you want to delete this account? (y/n): ");
                    char delOpt = char.Parse(Console.ReadLine());

                    if (delOpt == 'y' || delOpt == 'Y')
                    {
                        Accounts.Remove(a);

                        Console.WriteLine("Account deleted!");
                    }
                }
            }
        }
    }
}
